package commands

import (
	"context"
	"fmt"
	"github.com/fatih/color"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/hulutech-web/goravel-kit-cli/internal/utils"
	"github.com/urfave/cli/v2"
)

var NewCommand = &cli.Command{
	Name:      "new",
	Usage:     "Create a new Goravel application from template",
	ArgsUsage: "<project-name>",
	Action:    createNewProject,
	Flags: []cli.Flag{
		&cli.BoolFlag{
			Name:  "force",
			Usage: "Force create project even if directory exists",
		},
		&cli.StringFlag{
			Name:  "branch",
			Usage: "Git branch to use",
			Value: "master",
		},
		&cli.BoolFlag{
			Name:  "verbose",
			Usage: "Show verbose output",
		},
		&cli.BoolFlag{
			Name:  "ssh",
			Usage: "Use SSH URL instead of HTTPS",
		},
		&cli.DurationFlag{
			Name:  "timeout",
			Usage: "Timeout for download operation",
			Value: 5 * time.Minute,
		},
	},
}

func display_banner() {
	fmt.Println(" ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà          ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà ")
	fmt.Println("‚ñà‚ñà       ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà          ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà        ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà ")
	fmt.Println("‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà          ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà        ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà ")
	fmt.Println("‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà          ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà        ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà ")
	fmt.Println(" ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ")
	fmt.Println("                                                                                                          ")
	fmt.Println("                                                                                                          ")
}

// Ê∑ªÂä†ÁâàÊùÉ‰ø°ÊÅØÊòæÁ§∫ÂáΩÊï∞
func printWelcomeBanner(projectName string) {
	cyan := color.New(color.FgCyan, color.Bold)
	green := color.New(color.FgGreen, color.Bold)
	yellow := color.New(color.FgYellow, color.Bold)
	fmt.Printf("\n")
	fmt.Printf("\n")
	cyan.Println(" ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà          ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà ")
	cyan.Println("‚ñà‚ñà       ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà          ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà        ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà ")
	cyan.Println("‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà          ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà        ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà ")
	cyan.Println("‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà          ‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà        ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà ")
	cyan.Println(" ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ")
	cyan.Println("         ")
	green.Println("                    +++++++++++++++++++üéâÊ¨¢Ëøé‰ΩøÁî® Goravel Kit CLI üèÜ+++++++++++++++++++")
	yellow.Printf("                    |¬∑<<ËææÂ∑ûËë´Ëä¶ÁßëÊäÄ>>Á†îÂèë\n")
	yellow.Printf("                    |¬∑‰ΩúËÄÖ: yuanhaozhuzhu@hotmail.com\n")
	yellow.Printf("                    |¬∑ÂºÄÂèëÊó∂Èó¥: 2025-08-22\n")
	yellow.Printf("                    |¬∑ÁâàÊú¨Âè∑: v1.0.0\n")
	yellow.Printf("                    |¬∑ÁâàÊú¨ËØ¥Êòé: Goravel È°πÁõÆËÑöÊâãÊû∂Â∑•ÂÖ∑\n")
	yellow.Printf("                    |¬∑ÁâàÊú¨Êó∂Èó¥: 2025-08-22\n")
	cyan.Println("                    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")

	fmt.Printf("\n")
	color.New(color.FgHiWhite, color.Bold).Printf("üöÄ ÂºÄÂßãÂàõÂª∫ Goravel È°πÁõÆ: %s\n", projectName)
	fmt.Printf("\n")
}

func createNewProject(c *cli.Context) error {
	if c.Args().Len() < 1 {
		return fmt.Errorf("project name is required\nUsage: goravel-kit-cli new <project-name>")
	}

	projectName := c.Args().First()
	branch := c.String("branch")
	force := c.Bool("force")
	verbose := c.Bool("verbose")
	useSSH := c.Bool("ssh")
	timeout := c.Duration("timeout")

	// ËÆæÁΩÆÂõ∫ÂÆöÁöÑÊ®°Êùø‰ªìÂ∫ì
	var repoURL string
	if useSSH {
		repoURL = "git@github.com:hulutech-web/goravel-kit.git"
	} else {
		repoURL = "https://github.com/hulutech-web/goravel-kit.git"
	}

	printWelcomeBanner(projectName)
	fmt.Printf("üì¶ Template: hulutech-web/goravel-kit@%s\n", branch)

	if verbose {
		fmt.Printf("üîó URL: %s\n", repoURL)
		fmt.Printf("‚è±Ô∏è  Timeout: %v\n", timeout)
	}

	// Ê£ÄÊü•ÁõÆÂΩïÊòØÂê¶Â≠òÂú®
	if utils.DirectoryExists(projectName) && !force {
		return fmt.Errorf("‚ùå Directory '%s' already exists. Use --force to overwrite", projectName)
	}

	// Ê£ÄÊü•ÁΩëÁªúËøûÊé•
	if verbose {
		fmt.Printf("üåê Checking network connection...\n")
	}
	if !utils.CheckGitHubAccess() {
		return fmt.Errorf("‚ùå Cannot access GitHub. Please check your network connection")
	}

	// ÂàõÂª∫‰∏¥Êó∂ÁõÆÂΩï
	tempDir, err := os.MkdirTemp("", "goravel-kit-*")
	if err != nil {
		return fmt.Errorf("‚ùå Failed to create temp directory: %w", err)
	}
	defer func() {
		if err := os.RemoveAll(tempDir); err != nil && verbose {
			fmt.Printf("‚ö†Ô∏è  Warning: failed to clean temp directory: %v\n", err)
		}
	}()

	fmt.Printf("üì• Downloading template...\n")
	fmt.Printf("   This may take a few moments depending on your network speed.\n")

	// ‰ΩøÁî®Â∏¶Ë∂ÖÊó∂ÁöÑ‰∏ä‰∏ãÊñá
	ctx, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()

	// ‰∏ãËΩΩÊ®°Êùø
	if err := utils.CloneRepositoryWithContext(ctx, repoURL, branch, tempDir, verbose); err != nil {
		fmt.Printf("‚ùå Download failed: %v\n", err)
		fmt.Printf("üí° Tips:\n")
		fmt.Printf("   - Try using --ssh flag if you have SSH keys configured\n")
		fmt.Printf("   - Check your internet connection\n")
		fmt.Printf("   - Use --verbose for more details\n")
		return fmt.Errorf("failed to download template")
	}

	fmt.Printf("‚úÖ Template downloaded successfully\n")
	fmt.Printf("üîÑ Processing template files...\n")

	// ÁßªÈô§.gitÁõÆÂΩï
	gitDir := filepath.Join(tempDir, ".git")
	if utils.DirectoryExists(gitDir) {
		if err := os.RemoveAll(gitDir); err != nil {
			return fmt.Errorf("‚ùå Failed to remove .git directory: %w", err)
		}
		fmt.Printf("üóëÔ∏è  Removed .git directory\n")
	}

	// ÁßªÈô§ÂÖ∂‰ªñ‰∏çÂøÖË¶ÅÁöÑÊñá‰ª∂
	unnecessaryFiles := []string{".github", ".gitignore", "LICENSE", "README.md"}
	for _, file := range unnecessaryFiles {
		filePath := filepath.Join(tempDir, file)
		if utils.DirectoryExists(filePath) || utils.FileExists(filePath) {
			os.RemoveAll(filePath)
			if verbose {
				fmt.Printf("üóëÔ∏è  Removed: %s\n", file)
			}
		}
	}

	// Â¶ÇÊûúÁõÆÊ†áÁõÆÂΩïÂ∑≤Â≠òÂú®ÔºåÂÖàÂà†Èô§
	if utils.DirectoryExists(projectName) {
		if err := os.RemoveAll(projectName); err != nil {
			return fmt.Errorf("‚ùå Failed to remove existing directory: %w", err)
		}
		fmt.Printf("üóëÔ∏è  Removed existing directory: %s\n", projectName)
	}

	// ÁßªÂä®Âà∞ÁõÆÊ†á‰ΩçÁΩÆ
	if err := utils.MoveDirectory(tempDir, projectName); err != nil {
		return fmt.Errorf("‚ùå Failed to create project: %w", err)
	}
	fmt.Printf("üìÅ Project structure created\n")

	// Êõ¥Êñ∞È°πÁõÆ‰∏≠ÁöÑÊ®°ÂùóÂêçÁß∞
	if err := updateModuleName(projectName, projectName); err != nil {
		fmt.Printf("‚ö†Ô∏è  Warning: failed to update module name: %v\n", err)
	} else {
		fmt.Printf("üìù Updated go.mod module name\n")
	}

	// Êõ¥Êñ∞ÁéØÂ¢ÉÊñá‰ª∂
	if err := updateEnvFile(projectName, projectName); err != nil {
		fmt.Printf("‚ö†Ô∏è  Warning: failed to update .env file: %v\n", err)
	} else {
		fmt.Printf("üìù Updated .env configuration\n")
	}

	fmt.Printf("\nüéâ Project '%s' created successfully!\n", projectName)
	fmt.Printf("\nüìã Next steps:\n")
	fmt.Printf("   cd %s\n", projectName)
	fmt.Printf("   go mod tidy\n")
	fmt.Printf("   go run .\n")
	fmt.Printf("\nüí° Tip: Run with --verbose for detailed output\n")

	return nil
}

func updateModuleName(projectDir, moduleName string) error {
	goModPath := filepath.Join(projectDir, "go.mod")
	if !utils.FileExists(goModPath) {
		return nil
	}

	content, err := os.ReadFile(goModPath)
	if err != nil {
		return err
	}

	lines := strings.Split(string(content), "\n")
	if len(lines) > 0 && strings.HasPrefix(lines[0], "module ") {
		lines[0] = "module " + moduleName
	}

	newContent := strings.Join(lines, "\n")
	return os.WriteFile(goModPath, []byte(newContent), 0644)
}

func updateEnvFile(projectDir, projectName string) error {
	envPath := filepath.Join(projectDir, ".env")
	if !utils.FileExists(envPath) {
		return nil
	}

	content, err := os.ReadFile(envPath)
	if err != nil {
		return err
	}

	envContent := string(content)
	envContent = strings.Replace(envContent, "APP_NAME=Goravel", "APP_NAME="+projectName, 1)
	envContent = strings.Replace(envContent, "APP_URL=http://localhost", "APP_URL=http://localhost:3000", 1)

	return os.WriteFile(envPath, []byte(envContent), 0644)
}
